*نکته۱: اگر در کدمان از کارکتر # استفاده کنیم، تمامی نوشته‌های بعد از آن تا پایان خط توسط پایتون نادیده گرفته می‌شود. به نوشته‌های بعد از کارکتر مربع اصطلاحا کامنت گفته می‌شود که همان طور که پیداست برای توضیح دستورات نوشته شده استفاده می‌شود. در ادامه نمونه‌هایی از آن را می‌بینید.*
*نکته۲: در حین خوندن درسنامه چندتایی تمرین سر کلاس می‌بینید که سر کلاس درمورشون بحث کردیم و حلشون کردیم. جواب‌هاشون رو نمی‌ذارم تا اگه دوباره بهش رسیدید و جوابش رو نمی‌دونستید بگید که جلسه‌ی بعد در مورد بحث کنیم.*

# مقدار

مقدار یا value خیلی نیاز به توضیح ندارد.

مثلا ۳ که از نوع عدد صحیح یا integer هست که تو پایتون به اختصار `int` بهش می‌گن.

یا کلمه‌ای مثل «salam» که یه رشته از کارکترهاست و تو پایتون بهش می‌گن `string`

برای فهمیدن نوع یه چیز می‌تونیم از دستور `type` استفاده کنیم

```
>>> 3
3
>>> 5+6
11
>>> 3
3
>>> 5+6
11
>>> 6*7
42
>>> 8/4
2.0
>>> 8/3
2.6666666666666665
>>> 10-100
-90
>>> 2**8 # tavan
256
>>> 17//5 # taghsime sahih
3
>>> 17%5 # baghimande
2
>>> 'hello'
'hello'
>>> "aleykom" # " mitoone bejaye ' estefade beshe
'aleykom'
>>> type(4)
<class 'int'>
>>> type(-1)
<class 'int'>
>>> type("aleykom")
<class 'str'>
>>> type('hello')
<class 'str'>
```

### تمرین سر کلاس

نوع 7/5؟

نوع 8/2؟

نوع 8//2؟

نوع 4.5؟

# عملگرها

عملگرها داری اولویت ریاضی هستند که به تریب زیر می‌باشد:
```
()
\**
\* /
+ -
```


برای مثال توجه کنید

```
>>> 2 ** 2 * 3 # = 4 * 3
12
>>> 2 * 2 ** 3 # = 2 * 8
16
>>> 2 * 3 + 1 # = 6 + 2
7
>>> 2 * ( 3 + 1 ) # = 2 * 4
8
```

### تمرین سر کلاس

حاصل مقادیر زیر؟

```
( 1 + 2 ) / 3
( 1 + 2 ) // 3
5 ** (3 + 2)
(3 + 2) ** 2 / 5
```

---
## عملگرهای رشته
همچنین اپراتورهای +,* برای استرینگ هم پشتیبانی می‌شود

به علاوه در واقع همان نقش چسباندن و ضرب نقض تکرار را دارد:

```
>>> 'salam ' + 'aleykom'
'salam aleykom'
>>> 'tekrar' * 3
'tekrartekrartekrar'
```


### تمرین سر کلاس
```
"very" * 3 + "simple"
```


-------

# متغیرها
متغیر یا variable به خونه‌ای از حافظه می‌گن که ما تو برنامه‌مون ازش استفاده می‌کنیم. می‌تونیم به این خونه از حافظه یه اسم اختصاص بدیم که باید این ۳ تا قانون رو رعایت کنن:
۱. تنها می‌تواند از اعداد، حروف انگیلیسی و _ استفاده کند.
۲. با عدد شروع نشود.
۳. مانند کلمات زیر که به آن‌ها keyword یا کلمات رزرو شده‌ی پایتون (که همان دستورات اصلی این زبان هستند) نباشند:

```
and       del       from      None      True
as        elif      global    nonlocal  try
assert    else      if        not       while
break     except    import    or        with
class     False     in        pass      yield
continue  finally   is        raise
def       for       lambda    return
```

متغیرها به درد بخور تریت مفهوم توی برنامه‌نویسی هستن چون میشه به بهشون مقداری رو نسبت داد و در ادامه ازشون استفاده کرد.

برای مثال به دستورات زیر نگاه کنید:

```
>>> x = 1 # assigment: yani 1 ro beriz too motaghayeri be name x
>>> x
>>> x = x + 1 # aval samte rast hesab shode va meghdare an dar chap rikhte mishavad
>>> x
2

>>> hello = 'salam'
>>> type(hello)
<class 'str'>

>>> gheymate_ivan = 100
>>> tedad = 20
>>> gheymate_kol = gheymate_ivan  * tedad
>>> gheymate_kol
2000
>>> tedad
20
```

\*نکته : سعی کنید اسم متغیرهاتون واضح و توصیح دهنده‌ی کاکردش باشه و اگه چند بخشیه از _ استفاده کنید*

###تمرین سر کلاس

خروجی برنامه‌های زیر چیست؟

```
day = 10
month = 'mordad'
day + month
day = '10'
day + month
```

```
afarin = "afarin"
sadhezar_afarin = afarin * 100000
sadhezar_afarin
```

---
کدوم یک از متغیر‌های زیر قابل قبولند؟

```
xd011
xd0l
salam_22
yield
kelase_python
kelasePython
متغیر
0.3f
```

---
مقادیر ۲ متغیر را با هم عوض کنید.

راهنمایی: از متغیر کمکی استفاده کنید.
