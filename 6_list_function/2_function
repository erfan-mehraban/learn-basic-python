تابع یا function در برنامه‌نویسی به معنای قطعه‌ای از کد است که بسته بندی شده است!
توابع ۲ کارکرد اصلی دارند:
 - شکوندن برنامه به قطعات کوچکتر (که باعث فهم بهتر کد،دیباگ راحت تر و نوشتن ساده تر آن می‌شود)
 - تکرار آن قطعه کد به دفعات زیاد ویا به منظور کارکردهای متفاوت
برای مثال فرض کنید که برای رباتتون تابع نون خریدن رو تعریف می‌کنید. حالا به جای اینکه هر روز صبح مراحل نون خریدن رو بهش یاد بدید کافیه که هر روز صبح اون تابع رو صدا بزنید
یا اگر بخواید که به جای یک عدد نان، سه عدد نان بخرد تابع نان خریدن را سه بار اجرا کنید.
البته اگه این تابع رو ۳ بار صدا بزنید، ربات هر بار به نونوایی رفته یک نان خریده و برمی‌گردد. بنابراین بهتر است که تابع خود را جوری تعریف کنید که ورودی بگیرد. یعنی تعداد مورد نیاز نان شما را بگیرد و از این تعداد در موقعیت درست خودش استفاده کند.
قبلا در پایتون توابعی را مشاهده کردیم. این توابع که به صورت پیشرفت در پایتون هستند توابع درون‌ساز یا built-in function می‌گویند. مانند تابع int, print, type
حال اگر بخواهیم خودمان تابعی را تعریف کنیم کافی است اینگونه عمل کنیم:

```
def <function namr>():
    <block contain code>

def say_hello():
    print("hello!")

for i in range(10):
   say_hello()
```

ترجمه توابع برای پایتون مانند این است که همان کد در محل صدا زدن تابع قرار داشته باشد. همان طور که می‌دانید پایتون کدها را از بالا به پایین می‌خواند بنابراین اگر کدی بالاتر از  محل صدا زدن تابع باشد زودتر و اگر پایین تر باشد دیرتر صدا زده می‌شود و کاری به محل واقعی و تعریف تابع ندارد!
همچنین اگر کد درون تابع خطای اجرایی داشته باشد پایتون پس از صدا شدن تابع آن را می‌فهمد.

```
print("before")
say_hello()
print("after")
```

همانطور که متوجه شدید گاهی اوقات توابع مقداری را بر می‌گردانند و گاهی اوقات نه. زمانی که تابع مقداری را بر می‌گیرداند مثل این است که به جای تابع در برنامه آن مقدار را قرار داده باشیم
برای اینکه تابع شما مقداری را برگرداند از دستور return استفاده کنید. این دستور خود یک تابع نیست پس پرانتز ندارد و تنها در درون توابع می‌توان آن‌ها را صدا زد.

```
>>> def ten():
...        return 10
...
>>> a = ten
>>> b = 10
>>> a == b
True
```

برای آنکه مقداری را به تابع ورودی بدهید کافی است لیست متغیرهایی که تابع پس از صدا شدن، مقادیر را در آن قرار می‌دهد جلوی اسم تابع بنویسید

```
def hello(name):
    print("Hi ",name)

def print_jam(a,b):
    print(a+b)

def jam(a, b):
    return a+b

def print_jam(a,b):
    print(jam(a,b))
```

مثال:
برنامه ای بنویسید که لیستی از اعداد را بگیرد و میانگین اعداد بین ۵ تا ۱۰ را چاپ کند

```
def int_list(l):
    result = []
    for item in l:
        result.append(int(l))
    return(result)
def between5and10(num):
    answr = 5 > num > 10
    return answr
def avg(l):
    s = 0
    for x in l:
        s += x
    return s/len(l)
i = input()
numbers = int_list(i.split())
good_numbers = []
for n in numbers:
    if between5and10(n):
        good_numbers .append(n)
print(avg(good_numbers))
```

مثال:
برنامه ای بنویسید که ۴ عدد بگیرد. عدد اول را به تعداد عدد چهارم، عدد دوم را به تعداد عدد اول، عدد سوم را به تعداد عدد دوم و عدد چهارم را به تعداد عدد اول چاپ کند.

```
def n_time_print(v, n):
    for i in range(n):
       print(v)

numbers = int_list(input().split())
n_time_print(numbers[0],numbers[3])
n_time_print(numbers[1],numbers[0])
n_time_print(numbers[2],numbers[1])
n_time_print(numbers[3],numbers[2])
```

# تمرین در کلاس

https://quera.ir/problemset/contest/10166/%D8%B3%D8%A4%D8%A7%D9%84%D8%A7%D8%AA-%D9%85%D8%B3%D8%A7%D8%A8%D9%82%D9%87_%D8%B3%DB%8C%DA%A9%D9%84-%DA%AF%D8%B1%D9%81%D8%AA%D9%86-%D8%AF%D8%B1-%D8%A8%D8%B1%D8%B1%D9%87

---
https://quera.ir/problemset/contest/3541/%D8%B3%D8%A4%D8%A7%D9%84%D8%A7%D8%AA-%D9%85%D8%B3%D8%A7%D8%A8%D9%82%D9%87_%D9%85%D8%B3%D8%AA%D8%B7%DB%8C%D9%84-%D8%A8%D8%AF

---
https://quera.ir/problemset/contest/10326/%D8%B3%D8%A4%D8%A7%D9%84%D8%A7%D8%AA-%D9%85%D8%B3%D8%A7%D8%A8%D9%82%D9%87_%D8%A7%D8%B3%D8%AA%D8%A7%D8%B1%D8%AA-%D8%A2%D9%BE-%D8%A8%D8%A7%DA%A9%D9%84%D8%A7%D8%B3

---
https://quera.ir/problemset/contest/10164/%D8%B3%D8%A4%D8%A7%D9%84%D8%A7%D8%AA-%D9%85%D8%B3%D8%A7%D8%A8%D9%82%D9%87_%D8%A8%D8%A7%D8%B2%DB%8C-%D9%85%D9%86%D8%B7%D9%82%DB%8C-%D8%AF%D8%B1-%D8%A8%D8%B1%D8%B1%D9%87

---
# تابع بازگشتی

گاهی اوقات نیاز داریم که در تابع، خود آن را صدا بزنیم. به این تابع، تابع بازگشتی می‌گوییم.
معروف ترین مثال برای کاربرد تابع بازگشتی دنباله‌های ریاضی هستند.
هرچند این توابع می‌توانند خیلی پیچیده شوند ولی تنها نکته‌ای که در هنگام نوشتن آن‌ها نیاز است که حواستان بهش باشد، شرط خروج یاهمان شرط پایانی برای تابع می‌باشد
زیرا در صورت عدم دقت به ارور جالب sackoverflow برخواهید خورد!

```
def sum_to_one(n):
    if n==1:
        return 1
    return n + sum_to_one(n-1)
```

یکی دیگر از علت‌های نوشتن برنامه به این صورت، کم بودن پیچیدگی نوشتن برنامه است.
برای مثال دنباله‌های ۲ مجهولی یا هوش‌های مصنوعی برای بعضی از بازی‌ها
# تمرین در کلاس

نوشتن تابع دنباله حسابی
(چک کردن یک عدد و تولید آن‌ها)

---
تابع فیبوناچی

---
https://quera.ir/problemset/contest/17675/%D8%B3%D8%A4%D8%A7%D9%84%D8%A7%D8%AA-%D9%85%D8%B3%D8%A7%D8%A8%D9%82%D9%87_%D8%B1%D8%B4%D8%AA%D9%87-%D9%81%DB%8C%D8%A8%D9%88%D9%86%D8%A7%DA%86%DB%8C

