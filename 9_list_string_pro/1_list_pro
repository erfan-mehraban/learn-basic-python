# slice
## پرسش اول کلاس

تابعی بنویسید که ۲ ورودی بگیرد و لیستی را برگرداند که از ایندکس ورودی اول تا دوم را برگرداند.

```
def slice(a, s, e):
        result = []
        for i in range(e-s):
                result.append(a[i+s])
        return result
```

  برای دسترسی تنها به بخشی از یک لیست که بیشتر یک عنصر باشد میتوان از راه پایتونی آن استفاده کرد. برای اینکار درون  [] کافی است از : استفاده کنیم و قبل از آن اندیس شروع و بعد از آن اندیس پایان را قرار دهیم

همچنین می‌توان یکی از آن ها را خالی گذاشت که تا از ابتدا یا تا انتها را انتخاب نماید

```
>>> a = [1,2,3,4]
>>> a[1:3]
[2, 3]
>>> a[:3]
[1, 2, 3]
>>> a[1:]
[2, 3, 4]
>>> a[:]
[1, 2, 3, 4]
```

همچنین می‌توان از یک : دیگر استفاده کرد و تعداد گام ها در هر انتخاب را تعیین کرد. یعنی می‌توان گفت ۲ تا در میان یا n تا در میان آرایه‌را قطع کند

```
>>> a = [1,2,3,4,5,6,7,8,9]
>>> a[::2]
[1, 3, 5, 7, 9]
>>> a[1:6:2]
[2, 4, 6]
```

همچنین در صورتی که عدد منفی استفاده کنیم برعکس می‌شمارد:

```
>>> a[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1]
>>> a[::-2]
[9, 7, 5, 3, 1]
```

# sort
برای مرتب سازی آرایه در صورتی که همه‌ی عناصر آن عدد باشند از دستور سورت می‌توان استفاده کرد. در نظر داشته باشید که این دستور خروجی ندارد و خود آرایه را عوض می‌کند

```
>>> a = [7,2,4,9,3,1,8,0,5]
>>> a.sort()
>>> a
[0, 1, 2, 3, 4, 5, 7, 8, 9]
```

# in

برای چک کردن اینکه آیا عنصری در آرایه هست یا می‌توان مانند دیکشنری از دستور in استفاده کرد. این دستور نسبت به حالت دیکشنری بسیار کندتر عمل می‌کند و برای آرایه‌های بزرگ زمان زیادی طول می‌کشد

```
>>> a = [7,2,4,9,"salam",1,8,0,5]
>>> "salam" in a
True
>>> 100 in a
False
```
