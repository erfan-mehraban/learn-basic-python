اکثر برنامه‌های دنیای امروزی دیگر با ورودی‌های کاربر یا ورودی‌هایی که در در لحظه تولید می‌شوند کار نمی‌کنند بلکه عموما از جایی ماندگارتر و مستقل از برنامه‌ی اصلی خوانده می‌شوند مانند هارد کامپیوتر

اطلاعات در هارد کامپیوتر به صورت فایل‌ها ذخیره می‌شوند. برنامه‌های مختلف فایل‌ها را می‌خوانند و در صورت نیاز در آن‌ها می‌نویسند.

پایتون برای ارتباط با فایل‌ها از مفهوم handler یا دستگیره استفاده می‌کند. یعنی برای نوشتن یا خواندن از روی فایل باید یک هندلر ایجاد کرده و به آن هندلر بگوییم که اطلاعات را از روی فایل بخوان یا بنویس. به طور کلی وظیفه‌ی پیچیده‌ی مدیریت فایل بر روی هارد بر عهده‌ی هندلر می‌باشد.

برای ایجاد یک هندلر در پایتون از دستور open استفاده می‌کنیم که یک فایل را باز کرده و برای آن یک هندلر ایجاد می‌کند و برمیگرداند. پس هندلر را در یک متغیر ذخیره می‌کنیم که بعدا از آن استفاده کنیم. ورودی دوم این تابع نحوه ی برخورد با فایل می‌باشد. برای مثال این فایل فقط خوانده می‌شود، نوشته می‌شود، به ته آن اصافه می‌شود یا ...

```
>>> a = open("new_file.txt", "r+")
>>> a
<_io.TextIOWrapper name='new_file.txt' mode='r+' encoding='UTF-8'>
```

مد w+ برای نوشتن و خواندن استفاده می‌شود و از اول فایل شروع به خواندن و نوشتن می‌کند و در صورت نبود فایل آن را می سازد.

برای خواندن کل فایل از دستور read استفاده کنید.

برای کار با فایل از دستور with استفاده کنید و کد‌های مربوط به آن را در بلاک بعدی آن بنویسید.

```
>>> with open("new_file.txt") as f:
    print(f)
    print(f.read())
<_io.TextIOWrapper name='new_file.txt' mode='r' encoding='UTF-8'>

```

برای نوشتن از دستور write استفاده کنید

```
>>> with open("new_file.txt", "w+") as f:
    f.write("salam!")
    f.write("khobi?\n")
    f.write("are")
```

برای خواندن و نوشتن از فایل هندلر از مفهومی به نام اشاره گر استفاده می‌کند. نسبت به نوع باز کردن فایل اشاره‌گر می‌تواند در آغاز فایل یا در انتهای فایل باشد. اگر دستور خواندن یا نوشتن صدا زده شود نسبت به مکان اشاره‌گر عمل مربوطه انجام می‌شود و اشاره گر به انتهای جای خونده شده یا نوشته شده منتقل می‌شود.

برای خواند یک خط نیز از دستور readline استفاده می‌شود

```
>>> with open("new_file.txt", "r+") as f:
    print(f.readline())
    print(f.readline())
    print(f.readline())
salam!khobi?

are

```

همانطور که دیدید کارکتر‌\n که انتهای فایل را مشخص می‌کند نیز به انتهای خط خوانده شده نیز اضافه شده است و جزو خط حساب می‌شود.

برای پاک کردن فضاهای خالی در اول و آخر استرینگ از تابع strip باید استفاده کنیم

```
>>> a = "     salam   "
>>> a.strip()
'salam'
>>> a = "line\n"
>>> a.strip()
'line'
```

پس برای خواندن خط به خط یک فایل:

```
>>> with open("new_file.txt") as f:
...     line = f.readline()
...     while line != "" :
...             print(line.strip())
...             line = f.readline()
... 
salam!khobi?
are
```

البته به یک روش دیگر هم می‌توان این کار را انجام داد:

```
>>> with open("new_file.txt") as f:
...     for line in f:
...             print(line.strip())
... 
salam!khobi?
are
```

مثال: میانگین افراد را که در فایل scr.txt ذخیره شده است حساب کنید و در فایل avg.txt بریزید.

avg.txt:

```
ali:84,92,35,16,38,90,3,22,69,3,12,1,99
mohammad:34,71,37,48,0,12,38,33,98,5
mina:14,10,3,97,15,76,24
sina:79,11,6,9,4,37,99,15,97
gholi:78,6,9,19,17,66,50,78
```

answer:

```python3
with open("src.txt") as src:
        with open("avg.txt", "w+") as avg:
                for line in src:
                        data = line.strip().split(':')
                        name = data[0]
                        scores = data[1].split(',')
                        count = sum = 0
                        for s in scores:
                                count += 1
                                sum += int(s)
                        avg.write(name+":")
                        avg.write(str(sum/count))
                        avg.write("\n")
```

# تمرین سر کلاس

شمردن یک کلمه تو فایل (هر سطر شامل یک کلمه است)

---
شمردن یک کلمه تو فایل (هر سطر شامل یک جمله است)

